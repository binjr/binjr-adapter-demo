import org.gradle.api.internal.file.copy.CopyAction
import org.gradle.api.internal.file.copy.CopyActionProcessingStream

import java.text.SimpleDateFormat

/*
 *    Copyright 2019 Frederic Thevenet
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

plugins {
    id 'java'
    id 'application'
    id "io.freefair.lombok" version "4.1.2"
    id "org.kordamp.markdown.convert" version "1.2.0"
    id "signing"
}

ext.IS_TAG = System.getenv('IS_TAG') != null ? System.getenv('IS_TAG') == "true" : false
ext.IS_RELEASE = IS_TAG && !(System.getenv('REPO_TAG_NAME').endsWith('-SNAPSHOT'))
ext.VERSION_STEM = "1.1.0"
ext.PRODUCT_VERSION = "${VERSION_STEM}${IS_RELEASE ? '' : '-SNAPSHOT'}"
ext.OS_NAME = System.getProperty("os.name").toLowerCase()
ext.OS_ARCH = System.getProperty("os.arch")
ext.IS_64 = OS_ARCH.toLowerCase().contains("64")
ext.IS_MAC = OS_NAME.contains("mac") || OS_NAME.contains("darwin")
ext.IS_WINDOWS = OS_NAME.contains("windows")
ext.IS_LINUX = OS_NAME.contains("linux")
ext.OPENJFX_VERSION = "13.0.1"
ext.OPENJFX_PLATEFORM_CLASSIFIER = IS_MAC ? 'mac' : IS_WINDOWS ? 'win' : IS_LINUX ? 'linux' : 'unsupported'

ext.DISTRIBUTION_NAME = "${project.name}-${PRODUCT_VERSION}"
ext.DISTRIBUTION_PATH = "${buildDir}/distributions/${DISTRIBUTION_NAME}"
ext.DISTRIBUTION_EXTENSION = "zip"

ext."signing.keyId" = System.getenv('GPG_KEY_NAME')
ext."signing.secretKeyRingFile" = "${projectDir}/distribution/publishing/keyring.gpg"
ext."signing.password" = System.getenv('GPG_PASSPHRASE')

group 'eu.binjr'
version "${PRODUCT_VERSION}"

sourceCompatibility = 11
targetCompatibility = 11
description 'binjr demo adapter'
compileJava.options.encoding = 'UTF-8'

dependencies {
    implementation 'eu.binjr:binjr-core:2.10.0'
    implementation "org.openjfx:javafx-base:$OPENJFX_VERSION:$OPENJFX_PLATEFORM_CLASSIFIER"
    implementation "org.openjfx:javafx-graphics:$OPENJFX_VERSION:$OPENJFX_PLATEFORM_CLASSIFIER"
    implementation "org.openjfx:javafx-controls:$OPENJFX_VERSION:$OPENJFX_PLATEFORM_CLASSIFIER"
    implementation "org.openjfx:javafx-fxml:$OPENJFX_VERSION:$OPENJFX_PLATEFORM_CLASSIFIER"
    implementation "org.openjfx:javafx-swing:$OPENJFX_VERSION:$OPENJFX_PLATEFORM_CLASSIFIER"

    compile("org.apache.logging.log4j:log4j-slf4j-impl:2.12.1") {
        exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-core'
    }

    compile("org.apache.logging.log4j:log4j-1.2-api:2.12.1") {
        exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-core'
    }
    compile('fr.jrds:jrdsagent:1.0-RC1') {
        exclude group: 'mysql', module: 'mysql-connector-java'
        exclude group: 'postgresql', module: 'postgresql'
        exclude group: 'org.jolokia', module: '*'
        exclude group: 'org.glassfish.external', module: 'opendmk_jmxremote_optional_jar'
        exclude group: 'commons-fileupload', module: 'commons-fileupload'
        exclude group: 'log4j', module: 'log4j'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    compile('fr.jrds:jrds-core:1.0-RC1') {
        exclude group: 'mysql', module: 'mysql-connector-java'
        exclude group: 'postgresql', module: 'postgresql'
        exclude group: 'org.jolokia', module: '*'
        exclude group: 'org.glassfish.external', module: 'opendmk_jmxremote_optional_jar'
        exclude group: 'commons-fileupload', module: 'commons-fileupload'
        exclude group: 'log4j', module: 'log4j'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    compile('fr.jrds:jrds-core:1.0-RC1:webapp') {
        exclude group: 'mysql', module: 'mysql-connector-java'
        exclude group: 'postgresql', module: 'postgresql'
        exclude group: 'org.jolokia', module: '*'
        exclude group: 'org.glassfish.external', module: 'opendmk_jmxremote_optional_jar'
        exclude group: 'commons-fileupload', module: 'commons-fileupload'
        exclude group: 'log4j', module: 'log4j'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
}

mainClassName = 'eu.binjr.core.Bootstrap'

jar {
    manifest {
        attributes(
                'Specification-Title': project.name,
                'Specification-Version': project.version,
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
        )
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

task shaded(type: Jar) {
    manifest {
        attributes(
                'Specification-Title': project.name,
                'Specification-Version': project.version,
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
        )
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyPluginLibs(type: Copy, dependsOn: shaded) {
    into "$DISTRIBUTION_PATH"
    from project.shaded
}

task copyPubKey(type: Copy) {
    into "${buildDir}"
    from "${projectDir}/distribution/publishing/Public_key-412EC8A85400AC3F.asc"
}

task copyInfo(type: Copy) {
    from "${projectDir}/distribution/info"
    into "${buildDir}/tmp/info"

    def changeHistory = new File("./CHANGELOG.md").getText("utf-8")
    def currentChanges = new File("./UNRELEASED.md").getText("utf-8")
    expand(["version"       : "$PRODUCT_VERSION",
            "releaseDate"   : "${new SimpleDateFormat("EEE, d MMM yyyy").format(new Date())}",
            "changeHistory" : "$changeHistory",
            "currentChanges": "$currentChanges",
            "tagName"       : "v${PRODUCT_VERSION}"
    ])
}

markdownToHtml.dependsOn(copyInfo)

markdownToHtml {
    sourceDir = file("${buildDir}/tmp/info")
    outputDir = file("$DISTRIBUTION_PATH")
    doLast {
        ConfigurableFileTree tree = fileTree(dir: "$DISTRIBUTION_PATH")
        tree.include '**/*.html'
        tree.each { File file ->
            String path = file.path
            File newFile = new File("${DISTRIBUTION_PATH}/tmp_${file.name}")
            newFile << "<html lang=\"en\">\n" +
                    "<head>\n" +
                    "    <title>" + (file.name - ".html") + "</title>\n" +
                    "    <meta charset=\"utf-8\"/>\n" +
                    "    <link rel=\"stylesheet\" href=\"./resources/css/plain.css\">\n" +
                    "</head>"
            newFile << file.getText("utf-8")
            if (!file.name.startsWith("LICENSE")) {
                newFile << "<footer>\n" +
                        "    <br>\n" +
                        "    <hr>\n" +
                        "    <p style=\"text-align:left;\">\n" +
                        "        (c) 2016-2019 <a href=\"https://www.fthevenet.eu\">Frederic Thevenet</a>\n" +
                        "        <span style=\"float:right;\"><a href=\"https://binjr.eu\">https://binjr.eu</a></span>\n" +
                        "    </p>\n" +
                        "</footer>"
            }
            file.delete()
            newFile.renameTo(path)
        }
    }
}

task packageDistributionZip(type: Zip,  dependsOn: [copyPluginLibs, copyPubKey, markdownToHtml]) {
    from DISTRIBUTION_PATH
    destinationDir buildDir
    archiveName "${DISTRIBUTION_NAME}.zip"
}

task packageDistribution(type: WrapTaskForSigning, dependsOn: packageDistributionZip){
    from "${buildDir}/${DISTRIBUTION_NAME}.${DISTRIBUTION_EXTENSION}"
    destinationDir buildDir
    archiveName "${DISTRIBUTION_NAME}.${DISTRIBUTION_EXTENSION}"
}

signing {
    sign packageDistribution
}


/**
 * This class is a no-op copy task whose purpose is to allow using the
 * standard gradle signing plugin to sign any arbitrary file.
 * The idea is to piggy-back on the existing support for signing
 * of tasks extending AbstractArchiveTask; to use it, simply declare a
 * task of that type and use the path to the file to be signed both as
 * the source and target of the archive.
 * NB: No copy/move/archiving will actually take place.
 */
class WrapTaskForSigning extends AbstractArchiveTask {

    @Override
    protected CopyAction createCopyAction() {
        return new noopCopyAction();
    }

    class noopCopyAction implements CopyAction {

        @Override
        WorkResult execute(CopyActionProcessingStream stream) {
            return WorkResults.didWork(true);
        }
    }
}

repositories {
    //mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}


run {
    systemProperties System.getProperties()
    jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
}

